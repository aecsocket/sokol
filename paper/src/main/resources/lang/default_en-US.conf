locale: "en-US"

p: "<reset><gray>"
m: "<reset><white>"
d: "<reset><dark_gray>"
h1: "<reset><yellow>"
h2: "<reset><dark_green>"
h3: "<reset><green>"
err: "<reset><red>"

nm: "<reset><white>"
id: "<reset><dark_aqua>"
lr: "<reset><gray><i>"

chat: {
  prefix: "<#329945>{sokol}"
  error: {
    exception: {
      no_message: ${chat.prefix}${err}"   <type>"
      message:    ${chat.prefix}${err}"   <type>: <message>"
    }
    caption: {
      argument.parse.failure: {
        duration: "Could not parse duration '{input}': {error}"
        key: "Could not parse key '{input}': {error}"
        component: {
          generic: "Could not parse component '{input}'"
          invalid: "Component '{input}' is not valid for this argument"
        }
        blueprint: {
          generic: "Could not parse blueprint '{input}'"
          invalid: "Blueprint '{input}' is not valid for this argument"
        }
        node: {
          generic: "Could not parse node: {error}"
          invalid: "Node is not valid for this argument"
        }
      }
    }
    no_node_value: ${chat.prefix}${err}" No value for node <path>!"
    no_arg:        ${chat.prefix}${err}" No valid argument specified for `<arg>`!"
    no_targets:    ${chat.prefix}${err}" No targets provided!"

    item_creation: ${chat.prefix}${err}" Could not create the item:"
    item_not_tree: ${chat.prefix}${err}" The held item is not a tree!"
  }
  command: {
    error: ${chat.prefix}${err}" <message>"
    version: ${chat.prefix}${m}" <name> "${p}"v<version> by "${m}"<authors>"
    reload: {
      start: ${chat.prefix}${p}" Reloading..."
      end: ${chat.prefix}${p}" Reloaded. Check console for details."
    }
    setting: ${chat.prefix}${p}" <line>"

    hover: {
      keyed: [
        ${id}"<key>"
        ${p}"Type: "${m}"<type>"
      ]
      keyed_info: [
        ${id}"<key>"
        ${p}"Type: "${m}"<type>"
        ""
        ${m}"Click to view full info"
        ${p}"  <command>"
      ]
    }
    list: {
      entry: ${chat.prefix}${h1}" <type> "${nm}"<name>"
      total: ${chat.prefix}${p}" Found "${m}"<results> "${p}"result(s)."
    }
    tree: {
      header:      ${chat.prefix}${h1}" <type> "${nm}"<name>"
      description: ${chat.prefix}${lr}"   <line>"
      root:        ${chat.prefix}${nm}"   <name>"
      node:         ${chat.prefix}${d}"   <indent>"${nm}"<slot>"${p}": "${nm}"<name>"
      complete: {
        complete:         ${chat.prefix}${p}" Tree "${m}"complete"
        incomplete:       ${chat.prefix}${p}" Tree "${m}"incomplete"${p}", missing (<missing>):"
        incomplete_entry: ${chat.prefix}${d}"   * "${err}"<path>"
      }
      stats:        ${chat.prefix}${p}" Stats: "${m}"<amount> "${d}"(hover to see individual stats)"
      indent: "  "
    }
    stats: {
      header: ${h2}"Stats ("${h3}"<amount>"${h2}"):"
      entry:  ${p}"<name>"${p}": <value>   "${p}"<nodes>x "${d}"[ <chain> ]"
    }
    component: {
      description: ${chat.prefix}${lr}"   <line>"
      tags:        ${chat.prefix}${h2}"   Tags: "${p}"[ "${m}"<tags>"${p}" ]"
      slots:       ${chat.prefix}${h2}"   Slots ("${h3}"<amount>"${h2}"): "${d}"(hover to see rule)"
      slot:        ${chat.prefix}${nm}"     <name>"${p}": [ "${m}"<tags>"${p}" ] @ "${m}"<offset>"
      features:    ${chat.prefix}${h2}"   Features ("${h3}"<amount>"${h2}"): "${d}"(hover to see configuration)"
      feature:     ${chat.prefix}${nm}"     <name>"${p}": <description>"
      stats:       ${chat.prefix}${h2}"   Stat Maps ("${h3}"<amount>"${h2}"): "${d}"(hover to see individual stats)"
      stat_map:    ${chat.prefix}${m}"     <priority>: "${p}"<amount>x  <rule>"
    }
    give: ${chat.prefix}${p}" Gave "${m}"<amount>x "${nm}"<item>"${p}" to "${m}"<target>"
  }
}

constant: {
  true: "True"
  false: "False"
}

feature: {
  dummy: {
    name: "Dummy"
    description: "Test feature, serves no purpose."
    config: [
       ${h2}"Dummy Feature "${h3}"Sokol inbuilt"
      ${m}"String value: "${p}"<string>",
      ${m}"Integer value: "${p}"<int>",
      ${m}"Double value: "${p}"<double>"
    ]
  }
  item_description: {
    name: "Item Description"
    description: "Renders item descriptions."
  }
  slot_display: {
    name: "Slot Display"
    description: "Renders slots and sub-nodes of a node."
  }
  stat_display: {
    name: "Stat Display"
    description: "Renders stat maps of a tree."
  }
  node_view: {
    name: "Node View"
    description: "Allows manipulating the node view through a GUI."
  }
}

rule: {
  incompatibility: {
    no_tree_data: "No tree data"
    constant: "Is not accepted"

    not: "Not"
    and: "Failed AND at <index>: <cause>"
    or: "No terms matched for OR"

    no_node_at: "No node at <path>"
    fail_at: "Fail at <path>: <cause>"
    no_node_root_at: "No node from root at <path>"
    fail_as_root: "Fail as <path> from root: <cause>"
    not_root: "Is not root"

    not_have_tags: "Does not have tags [<requires>], has [<has>]"
    not_have_features: "Does not have features [<requires>], has [<has>]"
    not_complete: "Is not complete"
  }
}
