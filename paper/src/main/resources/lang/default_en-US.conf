formats: {
  "error.invalid_component_type": {
    component_type: "var"
  }

  "command.sokol.stats.resolver_timings": {
    time_last: "var"
  }
  "command.sokol.stats.engine_timings": {
    time_last: "var"
  }
  "command.sokol.stats.timing": {
    interval: "key"
    time_avg: "var"
    time_min: "var"
    time_max: "var"
  }
  "command.sokol.stats.object_type": {
    type: "key"
    updated: "var"
    candidates: "var"
    percent: "var"
  }
  "command.sokol.systems.line": {
    type: "var"
  }
  "command.sokol.give": {
    amount: "var"
    id: "var"
    target: "var"
  }
  "command.sokol.summon": {
    amount: "var"
    id: "var"
  }
  "command.sokol.state.read.header.present": {
    entity: "var"
  }
  "command.sokol.state.read.header.empty": {
    entity: "var"
  }
  "command.sokol.state.read.component.line": {
    type: "var"
  }
  "command.sokol.state.read.complete": {
    results: "var"
  }
  "command.sokol.state.write.complete": {
    results: "var"
  }
}

en-US: {
  error: {
    caption: {
      argument.parse.failure: {
        entity_blueprint: "Invalid entity blueprint: {error}"
      }
    }
    invalid_component_type: "Invalid component type <component_type>."
    not_holding: "You are not currently holding an item."
    parse_shape: "Could not parse shape."
    parse_blueprint: "Could not parse blueprint."
    cannot_host: "Cannot host this blueprint as this object."
  }

  command.sokol: {
    stats: {
      timing: " · <interval>{interval_sec, number, :: . unit/second}</interval>: <time_avg>{time_avg, number, :: . unit/millisecond}</time_avg> avg / <time_min>{time_min, number, :: . unit/millisecond}</time_min> min / <time_max>{time_max, number, :: . unit/millisecond}</time_max> max"
      engine_timings: "Engine timings / <time_last>{time_last, number, :: unit/millisecond}</time_last> last:"
      object_types: "Object types (updated / candidates):"
      object_type: " · <type>{type}</type>: <updated>{updated, number}</updated> / <candidates>{candidates}</candidates> (<percent>{percent, number, percent}</percent>)"
    }
    systems: {
      header: "Systems registered in execution order:"
      line: " {index}. <type>{type}</type>"
    }
    give: "Gave <amount>{amount, number}</amount>x <item> to <target>"
    summon: "Summoned <amount>{amount, number}</amount>x <id>"
    holding: {
      freeze: {
        enable: "Froze currently held item."
        disable: "Unfroze currently held item."
      }
    }
    state: {
      read: {
        header: {
          present: "State of <entity> (hover to see all components):"
          empty: "State of <entity> (empty)"
        }
        component: {
          header: "All components:"
          line: "  <type>{type}</type>"
        }
        line: "  <line>"
        complete: """Read from {results, plural,
          one {<results>#</results> entity}
          other {<results>#</results> entities}
        }."""
      }
      write: {
        complete: """Wrote to {results, plural,
          one {<results>#</results> entity}
          other {<results>#</results> entities}
        }."""
      }
    }
  }
}
